{
    "collab_server" : "",
    "contents" : "library(data.table)\nlibrary(zoo)\nlibrary(dplyr)\nlibrary(prophet)\nlibrary(ggplot2)\n\n\n\ninv = read.csv('processed_investments.csv')\ncirc = read.csv('processed_circ.csv')\npromos = read.csv('processed_promos.csv')\nproph = read.csv('processed_customers.csv')\n\n\n\nregress = merge(proph, inv, by=c('FISCAL_YR', 'FISCAL_MO', 'Segment_Channel'), all.y=TRUE)\nregress$ds <- as.yearmon(paste(regress$FISCAL_YR, regress$FISCAL_MO, sep = \"-\"))\nsetnames(regress, 'monthly_customers', 'y')\n\nregress2 = merge(regress, promos, by = c('FISCAL_YR', 'FISCAL_MO', 'FISCAL_QTR', 'Segment_Channel'), all.y=TRUE)\nregress3 = merge(regress2, circ, by = c('FISCAL_YR', 'FISCAL_MO', 'FISCAL_QTR', 'Segment'), all.y=TRUE)\nregress3 = as.data.table(regress3)\n\ntrain = regress3[FISCAL_YR >= 2016]\n\n\nmake_forecast <- function(df, threshold) {\n  \n  seg_chan = as.character(df$Segment_Channel[1])\n  print(seg_chan)\n  df = as.data.table(df)\n  df = df[FISCAL_YR <= threshold]\n  m <- prophet(seasonality.mode = 'additive', holidays = holidays, holidays.prior.scale = .05, seasonality.prior.scale = 5, changepoint.prior.scale = .034, weekly.seasonality = FALSE, daily.seasonality = FALSE, yearly.seasonality = FALSE)\n  m <- add_regressor(m, name = 'circ_score')\n  #m <- add_regressor(m, name = 'peel_off_depth')\n  ##m <- add_regressor(m, name = 'post_card_depth')\n  #m <- add_regressor(m, name = 'free_ship_depth')\n  #m <- add_regressor(m, name = 'flash_sale_depth')\n  #m <- add_regressor(m, name = 'global_depth')\n  #m <- add_regressor(m, name = 'fp_entire_depth')\n  #m <- add_regressor(m, name = 'sp_entire_depth')\n  m <- add_seasonality(m, name='yearly', period=365.25, fourier.order=10, prior.scale = 0.05)\n  #m <- add_seasonality(m, name = 'quarterly', period = 365.25/4, fourier.order = 5, prior.scale = 15)\n  #m <- add_seasonality(m, name = 'monthly', period = 365.25/12, fourier.order = 3, prior.scale = 10)\n  m <- fit.prophet(m, df[FISCAL_YR <= (threshold - 1)])\n  future <- make_future_dataframe(m, periods = 12, freq = 'month')\n  future$circ_score = df$circ_score\n  #future$investment = df$investment  # FIXME this needs to be correctly specified\n  #future$peel_off_depth = df$peel_off_depth\n  ##future$post_card_depth = df$post_card_depth\n  #future$free_ship_depth = df$free_ship_depth\n  #future$flash_sale_depth = df$flash_sale_depth\n  #future$global_depth = df$global_depth\n  #future$fp_entire_depth = df$fp_entire_depth\n  #future$sp_entire_depth = df$sp_entire_depth\n  fcst <- predict(m, future)\n  prophet_plot_components(m, fcst)\n  #plot(m, fcst)+ggtitle(seg_chan)\n  return(fcst)\n}\n\n\n\nnew_years <- tibble(\n  holiday = 'new_years',\n  ds = as.Date(c('2017-12-01', '2018-11-01',\n                 '2019-12-01')),\n  lower_window = 0,\n  upper_window = 1\n)\n\nwomens_day <- tibble(\n  holiday = 'womens_day',\n  ds = as.Date(c('2016-02-01', '2017-02-01', '2018-02-01',\n                 '2019-02-01')),\n  lower_window = 0,\n  upper_window = 1\n)\n\ngood_friday <- tibble(\n  holiday = 'good_friday',\n  ds = as.Date(c('2016-02-01', '2017-03-01', '2018-02-01',\n                 '2019-03-01')),\n  lower_window = 0,\n  upper_window = 1\n)\n\neaster <- tibble(\n  holiday = 'easter',\n  ds = as.Date(c('2016-02-01', '2017-03-01', '2018-02-01',\n                 '2019-03-01')),\n  lower_window = 0,\n  upper_window = 1\n)\n\nmothers_day <- tibble(\n  holiday = 'mothers_day',\n  ds = as.Date(c('2016-04-01', '2017-04-01', '2018-04-01',\n                 '2019-04-01')),\n  lower_window = 0,\n  upper_window = 1\n)\n\nmemorial <- tibble(\n  # on average +17k customers\n  holiday = 'memorial',\n  ds = as.Date(c('2016-05-01', '2017-05-01', '2018-04-01',\n                 '2019-04-01')),\n  lower_window = 0,\n  upper_window = 1\n)\n\nindependence <- tibble(\n  # on average +5k customers\n  holiday = 'independence',\n  ds = as.Date(c('2016-06-01', '2017-06-01', '2018-05-01',\n                 '2019-05-01')),\n  lower_window = 0,\n  upper_window = 1\n)\n\nlabor <- tibble(\n  # on average +20k customers\n  holiday = 'labor',\n  ds = as.Date(c('2016-08-01', '2017-08-01', '2018-08-01',\n                 '2019-08-01')),\n  lower_window = 0,\n  upper_window = 1\n)\n\nthanksgiv <- tibble(\n  holiday = 'thanksgiv',\n  ds = as.Date(c('2016-10-01', '2017-10-01', '2018-10-01',\n                 '2019-10-01')),\n  lower_window = 0,\n  upper_window = 1\n)\n\nblack_fri <- tibble(\n  holiday = 'black_fri',\n  ds = as.Date(c('2016-10-01', '2017-10-01', '2018-10-01',\n                 '2019-10-01')),\n  lower_window = 0,\n  upper_window = 1\n)\n\ncyber_monday <- tibble(\n  holiday = 'cyber_monday',\n  ds = as.Date(c('2016-11-01', '2017-11-01', '2018-10-01',\n                 '2019-11-01')),\n  lower_window = 0,\n  upper_window = 1\n)\n\nchrist_eve <- tibble(\n  holiday = 'christ_eve',\n  ds = as.Date(c('2016-11-01', '2017-11-01', '2018-11-01',\n                 '2019-11-01')),\n  lower_window = 0,\n  upper_window = 1\n)\n\nchrist <- tibble(\n  holiday = 'christ',\n  ds = as.Date(c('2016-11-01', '2017-11-01', '2018-11-01',\n                 '2019-11-01')),\n  lower_window = 0,\n  upper_window = 1\n)\n\nnye <- tibble(\n  holiday = 'nye',\n  ds = as.Date(c('2016-11-01', '2017-12-01', '2018-11-01',\n                 '2019-11-01')),\n  lower_window = 0,\n  upper_window = 1\n)\n\n\n\n\nholidays <- bind_rows(nye, christ, cyber_monday, christ_eve,black_fri, thanksgiv, labor, independence, memorial, mothers_day, easter, good_friday, womens_day, new_years)\n\n\n\nfcst = train %>%  \n  group_by(Segment_Channel) %>%\n  do(make_forecast(., 2019)) %>% \n  dplyr::select(ds, Segment_Channel, yhat, yhat_upper)\n\n\n\n\nmonthly_pacing = fread(\"percentages.txt\", sep= '|')\nsetnames(monthly_pacing, 'Fiscal_Mo', 'FISCAL_MO')\n\n\n\nquarterly_pacing = fread(\"quarter_totals.txt\", sep= '|')\nquarterly_pacing[, quarter := ifelse(FISCAL_MO <= 3, 1, ifelse(FISCAL_MO <= 6, 2, ifelse(FISCAL_MO <= 9, 3, 4)))]\nquarterly_pacing[, quarter_sum := sum(cust_month), by=c(\"quarter\", \"Customer_Type\")]\nquarterly_pacing[, table := cust_quarter/quarter_sum]\nquarter_table = unique(quarterly_pacing[, c(\"Customer_Type\", \"quarter\", \"table\", \"quarter_sum\")])\nsetnames(quarter_table, \"Customer_Type\", \"Segment_Channel\")\n\n\ncalc_year_end <- function(cast_dat, year, hist) {\n  et = as.data.table(cast_dat)\n  et[, FISCAL_MO := month(ds)]\n  et[, quarter := ifelse(FISCAL_MO %in% c(1,2,3), 1, ifelse(FISCAL_MO %in% c(4,5,6), 2, ifelse(FISCAL_MO %in% c(7,8,9), 3,4)))]\n  et[, day := format(as.Date(ds,format=\"%Y-%m-%d\"), \"%d\")]\n  et[, FISCAL_YR := year(ds)]\n  et = et[ day == '01']\n  et[, Used_Forecast := ifelse(yhat > 0, yhat, yhat_upper)]\n  \n  \n  \n  #wrap up\n  df2 = hist[, c('Segment_Channel', 'FISCAL_YR', 'FISCAL_MO', 'y', 'Segment', 'Channel')]\n  et2 = merge(et, df2, by=c('Segment_Channel', 'FISCAL_MO', 'FISCAL_YR'), all.x=TRUE)\n  et2[, month_forecast := ifelse(is.na(y), Used_Forecast, y)]\n  \n  \n  year_agg = merge(et2, monthly_pacing, by = c(\"Segment_Channel\", \"FISCAL_MO\"))\n  year_agg = merge(year_agg, quarter_table, by = c(\"quarter\", \"Segment_Channel\"))\n  year_agg[, Year_Number2 := Used_Forecast * percent]\n  year_agg[, Year_Number2a := month_forecast * percent]\n  year_agg[, qnum := table*Used_Forecast]\n  year_agg[, quarter_forecast := table * month_forecast]\n  \n  \n  return(year_agg)\n}\n\n\n\nfinal_fcst = calc_year_end(fcst, 2019, regress3) \nfinal_fcst = final_fcst[FISCAL_YR == 2019]\n\n\nestimates = c(1, 0.544586951, 0.366562835, 0.337894522)\nq_s = final_fcst %>% group_by(quarter) %>% summarize(sum(quarter_forecast))\nq_s\nsum(q_s*estimates) #1921\n\nfinal_output = final_fcst[, c('quarter', 'Segment_Channel', 'FISCAL_MO', 'FISCAL_YR','month_forecast', 'quarter_forecast' , 'Channel', 'Segment')]\n\n\nwrite.csv(final_output, 'prophet_august.csv')\n\n\nfinal_output %>% \n  group_by(Channel, FISCAL_MO) %>%\n  summarize(sum(month_forecast))\n\nd = final_output %>% \n  group_by(Segment, FISCAL_MO) %>%\n  summarize(sum(month_forecast))\n\n\n",
    "created" : 1566316547653.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1212795656",
    "id" : "1ECCD5D4",
    "lastKnownWriteTime" : 1566336249,
    "last_content_update" : 1566336249919,
    "path" : "~/Desktop/janes_functions/prophet_package/prophet_script.R",
    "project_path" : "prophet_script.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}